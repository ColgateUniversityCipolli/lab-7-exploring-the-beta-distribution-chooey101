lower = 0,
upper = 1,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
data <- na.omit(data)
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
set.seed(7272 + i)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
View(MLE.est)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,2),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta), na.rm=T), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(.1,.1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(.001,.001),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
alpha_mom <- mom_result$x[1]
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(((data)^2), na.rm = T)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
#Solve for MOM
mom_result <- nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
alpha_mom <- mom_result$x[1]
beta_mom <- mom_result$x[2]
ggplot(data = wb.data$`2022_data`, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
data_df <- data.frame(x = wb.data$`2022_data`)
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=30, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=1000
, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=30
, fill = "lightblue", color = "black") +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
pt.est <- tibble(
iteration = numeric(),
MLE.alpha = numeric(),
MLE.beta = numeric(),
MOM.alpha = numeric(),
MOM.beta = numeric()
)
for(i in 1:1000){
set.seed(7272 + i)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
MLE.alpha = MLE.est$par[1]
MLE.beta = MLE.est$par[2]
MOM.est = nleqslv(x=c(8,950),
fn = MOM.beta.fn,
data = beta_estimation_values)
MOM.alpha = MOM.est$x[1]
MOM.beta = MOM.est$x[2]
pt.est <- pt.est |>
add_row(
iteration = i,
MLE.alpha = MLE.alpha,
MLE.beta = MLE.beta,
MOM.alpha = MOM.alpha,
MOM.beta = MOM.beta
)
}
p_mle_alpha <- ggplot(pt.est, aes(x=MLE.alpha))+
geom_histogram(aes(y=after_stat(density)), fill="steelblue", alpha=0.5, bins=30) +
geom_density(color="blue") +
theme_minimal() +
labs(title = "MLE Alpha", x = "MLE Alpha", y = "Density")
p_mle_beta <- ggplot(pt.est, aes(x=MLE.beta))+
geom_histogram(aes(y=after_stat(density)), fill="purple", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_minimal() +
labs(title = "MLE Beta", x = "MLE Beta", y = "Density")
p_mom_alpha <- ggplot(pt.est, aes(x=MOM.alpha))+
geom_histogram(aes(y=after_stat(density)), fill="orange", alpha=0.5, bins=30) +
geom_density(color="brown") +
theme_minimal() +
labs(title = "MOM Alpha", x = "MLE Alpha", y = "Density")
p_mom_beta <- ggplot(pt.est, aes(x=MOM.beta))+
geom_histogram(aes(y=after_stat(density)), fill="green", alpha=0.5, bins=30) +
geom_density(color="darkgreen") +
theme_minimal() +
labs(title = "MOM Beta", x = "MLE Beta", y = "Density")
(p_mle_alpha | p_mle_beta) / (p_mom_alpha | p_mom_beta)
library(tidyverse)
library(e1071)
library(patchwork)
library(nleqslv)
library(cumstats)
wb.data <- read_csv("wbdata.csv")
wb.data <- wb.data |>
select(67) |>
rename("2022_data" = "...67")|>
mutate(`2022_data` = if_else(row_number() %in% 2:267, `2022_data` / 1000, `2022_data`))
wb.clean <- na.omit(wb.data)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
wb.clean <- as.numeric(na.omit(data))
str(wb.clean)
View(wb.data)
wb.clean <- as.numeric(na.omit(wb.data$`2022_data`))
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
llbeta <- function(para, data, neg=FALSE){
alpha <- para[1]
beta <- para[2]
loglik <- sum(log(dbeta(data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
MLE.ans <- optim(para = c(1,1), fn = llbeta, data = wb.clean, neg = T)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
wb.clean <- as.numeric(na.omit(wb.data$`2022_data`))
MLE.ans <- optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
str(beta_estimation_values)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
wb.data <- read_csv("wbdata.csv")
wb.data <- wb.data |>
select(67) |>
rename("2022_data" = "...67")|>
mutate(`2022_data` = if_else(row_number() %in% 1:267, `2022_data` / 1000, `2022_data`))
wb.clean <- as.numeric(na.omit(wb.data$`2022_data`))
View(wb.data)
View(wb.data)
wb.data <- read_csv("wbdata.csv")
wb.data <- wb.data |>
select(67) |>
rename("2022_data" = "...67")|>
mutate(`2022_data` = if_else(row_number() %in% 1:267, `2022_data` / 1000, `2022_data`))
View(wb.data)
wb.data <- wb.data[-c(1, 2)]
wb.data <- wb.data[-c(1, 2), ]
View(wb.data)
View(wb.data)
wb.clean <- as.numeric(na.omit(wb.data$`2022_data`))
View(wb.data)
wb.data <- wb.data[-c(1, 2,266), ] #Removing outlyers
View(wb.data)
MLE.ans = optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
wb.clean <- as.numeric(na.omit(wb.data$`2022_data`))
MLE.ans = optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
View(MLE.ans)
View(MLE.ans)
MLE.ans = optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
alpha_mle <- MLE_ans$par[1]
MLE.ans = optim(par = c(1,1), fn = llbeta, data = wb.clean, neg = T)
alpha_mle <- MLE.ans$par[1]
beta_mle <- MLE.ans$par[2]
ggplot(data = wb.clean, aes(x = wb.clean)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
ggplot(data = wb.data, aes(x = wb.data)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(((data)^2), na.rm = T)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
mom_result <- nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
alpha_mom <- mom_result$x[1]
beta_mom <- mom_result$x[2]
ggplot(data = wb.data, aes(x = wb.data)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
ggplot(data = wb.data) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
ggplot(data = wb.data, aes(x = wb.data)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
ggplot(data = na.omit(wb.data), aes(x = na.omit(wb.data))) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Estimates for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
wb_data_df <- data.frame(wb.data)
ggplot(wb_data_df, aes(x = wb.data)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +  # Histogram
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), color = "red", size = 1) +  # MOM
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), color = "green", size = 1) +  # MLE
labs(title = "Histogram with MOM and MLE Density Curves for Beta Distribution",
x = "Value",
y = "Density") +
theme_minimal()
mom_density <- dbeta(x_vals, shape1 = alpha_mom, shape2 = beta_mom)
mom_density <- dbeta(wb.data, shape1 = alpha_mom, shape2 = beta_mom)
mom_density <- dbeta(wb.clean, shape1 = alpha_mom, shape2 = beta_mom)
mle_density <- dbeta(wb.clean, shape1 = alpha_mle, shape2 = beta_mle)
density_df <- data.frame(x = rep(x_vals, 2),
density = c(mom_density, mle_density),
Method = rep(c("MOM", "MLE"), each = length(x_vals)))
density_df <- data.frame(x = rep(x_vals, 2),
density = c(mom_density, mle_density),
Method = rep(c("MOM", "MLE"), each = length(x_vals)))
density_df <- data.frame(x = rep(wb.clean, 2),
density = c(mom_density, mle_density),
Method = rep(c("MOM", "MLE"), each = length(wb.clean)))
ggplot() +
geom_density(data = wb.clean, aes(x = wb.clean, y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +
geom_line(data = density_df, aes(x = x, y = density, color = Method), size = 1) +  # MOM & MLE Density Curves
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal()
wb_data_df <- data.frame(wb.data)
ggplot() +
geom_density(data = wb_data_df, aes(x = wb_data_df, y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +
geom_line(data = density_df, aes(x = x, y = density, color = Method), size = 1) +  # MOM & MLE Density Curves
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal()
ggplot(data.frame(wb.data), aes(x = wb.data)) +
geom_density(aes(y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +  # Kernel Density of Original Data
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), aes(color = "MOM"), size = 1) +  # MOM Beta Curve
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), aes(color = "MLE"), size = 1) +  # MLE Beta Curve
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal() +
theme(legend.position = "top")
wb.clean <-na.omit(wb.data$`2022_data`)
ggplot(wb.clean, aes(x = wb.clean)) +
geom_density(aes(y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +  # Kernel Density of Original Data
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), aes(color = "MOM"), size = 1) +  # MOM Beta Curve
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), aes(color = "MLE"), size = 1) +  # MLE Beta Curve
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal() +
theme(legend.position = "top")
wb_data_df <- data.frame(wb.clean)
wb_data_df <- data.frame(wb.clean)
ggplot(wb_data_df, aes(x = wb.data)) +
geom_density(aes(y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +  # Kernel Density of Original Data
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), aes(color = "MOM"), size = 1) +  # MOM Beta Curve
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), aes(color = "MLE"), size = 1) +  # MLE Beta Curve
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal() +
theme(legend.position = "top")
ggplot(wb_data_df, aes(x = wb_data_df)) +
geom_density(aes(y = ..density..), fill = "lightblue", alpha = 0.4, color = "black") +  # Kernel Density of Original Data
stat_function(fun = dbeta, args = list(shape1 = alpha_mom, shape2 = beta_mom), aes(color = "MOM"), size = 1) +  # MOM Beta Curve
stat_function(fun = dbeta, args = list(shape1 = alpha_mle, shape2 = beta_mle), aes(color = "MLE"), size = 1) +  # MLE Beta Curve
labs(title = "Density Plot with MOM and MLE Beta Distributions",
x = "Value",
y = "Density",
color = "Estimation Method") +
theme_minimal() +
theme(legend.position = "top")
hist_plot <- ggplot(wb_data_df, aes(x = wb.clean)) +
geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "blue", alpha = 0.5) +
labs(title = "Histogram of 2022 Data", x = "Values", y = "Density") +
theme_minimal()
