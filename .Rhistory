install.packages("tinytex")
library(tinytex)
install_tinytex()
install.packages("knitr")
help(package=sweave)
install.packages(artsy)
install.packages("aRtsy")
help("aRtsy")
??aRtsy
help("aRtsy")
library(aRtsy)
help("aRtsy")
library(aRtsy)
<<CollatzPlot3, eval=FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
canvas_collatz(
colors,
background = "#dbdbdb",
n = 72,
angle.even = 0.0145,
angle.odd = -0.05,
side = FALSE
)
library(stringr)
library(jsonlite)
#######Step 2 Code#######
library(stringr)
library(jsonlite)
essentia_files <- list.files(path = "EssentiaOutput/")
json_files <- essentia_files[str_count(essentia_files, ".json")==1]
essentia_df <- data.frame(
artist = character(),
album = character(),
song = character(),
json_data = numeric(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beats_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
stringsAsFactors = FALSE
)
for(i in 1:length(json_files)){
current.filename <- json_files[i]
file_parts <- str_split(current.filename, "-", simplify = TRUE)
artist <- file_parts[1]
album <- file_parts[2]
song <- str_replace(file_parts[3], ".json$", "")
json_data <- fromJSON(paste0("EssentiaOutput/", current.filename))
overall_loudness <- json_data$lowlevel$loudness_ebu128$integrated
spectral_energy <- json_data$lowlevel$spectral_energy
dissonance <- json_data$lowlevel$dissonance
pitch_salience <- json_data$lowlevel$pitch_salience
bpm <- json_data$rhythm$bpm
beats_loudness <- json_data$rhythm$beats_loudness
danceability <- json_data$rhythm$danceability
tuning_frequency <- json_data$tonal$tuning_frequency
new_row <- data.frame(  #singular row data frame which holds the essentia data from current.filename
artist = artist,
album = album,
song = song,
overall_loudness = overall_loudness,
spectral_energy = spectral_energy,
dissonance = dissonance,
pitch_salience = pitch_salience,
bpm = bpm,
beats_loudness = beats_loudness,
danceability = danceability,
tuning_frequency = tuning_frequency,
stringsAsFactors = FALSE
)
essentia_df <- rbind(essentia_df, new_row)
}
setwd("~/GitHub/lab-7-exploring-the-beta-distribution-chooey101")
library(tidyverse)
library(e1071)
install.packages("e1071")
install.packages("patchwork")
install.packages("nleqslv")
install.packages("cumstats")
library(tidyverse)
library(e1071)
library(patchwork)
library(nleqslv)
library(cumstats)
beta_table <- tibble(
alpha = numeric(),
beta = numeric(),
mean = numeric(),
variance = numeric(),
skewness = numeric(),
ex_kurt = numeric()
)
stat_funct <- function (alpha,beta) {
tibble(
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
}
beta_table |>
rbind( ,stat_funct(2,5))
?rbind
plot_funct <- function (alpha,beta) {
tibble(
alpha = alpha,
beta = beta,
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
q1.fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|> # generate a grid of points
mutate(beta.pdf = dbeta(x, alpha, beta), # compute the beta PDF
norm.pdf = dnorm(x, # Gaussian distribution with
mean = alpha/(alpha+beta), # same mean and variance
sd = sqrt((alpha*beta)/((alpha+beta)^2*(alpha+beta+1)))))
ggplot(data= q1.fig.dat)+ # specify data
geom_line(aes(x=x, y=beta.pdf, color="Beta(2,5)")) + # plot beta dist
geom_line(aes(x=x, y=norm.pdf, color="Gaussian(0.2857, 0.0255)")) + # plot guassian dist
geom_hline(yintercept=0)+ # plot x axis
theme_bw()+ # change theme
xlab("x")+ # label x axis
ylab("Density")+ # label y axis
scale_color_manual("", values = c("black", "grey"))+ # change colors
theme(legend.position = "bottom")
}
stat_funct <- function (alpha,beta) {
tibble(
alpha = alpha,
beta = beta,
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
}
stat25 <- stat_funct(2,5) #Compute and graph summary for a=2, b=5
stat55 <- stat_funct(5,5) #Compute and graph summary for a=5, b=5
stat52 <- stat_funct(5,2)
stat.5 <- stat_funct(0.5,0.5) #Compute and graph summary for a=.5, b=.5
View(stat.5)
beta_table |>
rbind(, stat25)
beta_table |>
rbind( , stat25)
#statistical summary
stat_funct <- function (alpha,beta) {
tibble(
alpha = alpha,
beta = beta,
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
mutate(alpha=as.numeric(alpha),
beta = as.numeric(beta),
mean=as.numeric(mean),
variance=as.numeric(variance),
skewness=as.numeric(skewness),
ex_kurt=as.numeric(ex_kurt))
}
beta_table |>
rbind( , stat25)
stat25 <- stat_funct(2,5) #Compute and graph summary for a=2, b=5
beta_table <- tibble(
alpha = double(),
beta = double(),
mean = double(),
variance = double(),
skewness = double(),
ex_kurt = double()
)
stat_funct <- function (alpha,beta) {
tibble(
alpha = alpha,
beta = beta,
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
}
stat25 <- stat_funct(2,5) #Compute and graph summary for a=2, b=5
beta_table |>
rbind(, stat25)
beta_table <- rbind(beta_table, stats25)
beta_table <- rbind(beta_table, stat25)
View(beta_table)
beta_table <- rbind(beta_table, stat55)
beta_table <- rbind(beta_table, stat52)
beta_table <- rbind(beta_table, stat.5)
View(beta_table)
plot_funct <- function (alpha,beta) {
tibble(
alpha = alpha,
beta = beta,
mean =  alpha/(alpha+beta),
variance = (alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)),
skewness = (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta)),
ex_kurt = (6*(((alpha-beta)^2)*(alpha+beta+1)-(alpha*beta)*(alpha+beta+2)))/((alpha*beta)*(alpha+beta+2)*(alpha+beta+3))
)
q1.fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|> # generate a grid of points
mutate(beta.pdf = dbeta(x, alpha, beta), # compute the beta PDF
norm.pdf = dnorm(x, # Gaussian distribution with same mean and variance
mean = alpha/(alpha+beta),
sd = sqrt((alpha*beta)/((alpha+beta)^2*(alpha+beta+1)))))
ggplot(data= q1.fig.dat)+ # specify data
geom_line(aes(x=x, y=beta.pdf, color="Beta(2,5)")) + # plot beta dist
geom_line(aes(x=x, y=norm.pdf, color="Gaussian(0.2857, 0.0255)")) + # plot gaussian dist
geom_hline(yintercept=0)+ # plot x axis
theme_bw()+ # change theme
xlab("x")+ # label x axis
ylab("Density")+ # label y axis
scale_color_manual("", values = c("black", "grey"))+ # change colors
theme(legend.position = "bottom")
}
plot_funct(2,5)
plot_funct(5,5)
plot_funct(5,2)
plot_funct(0.5,0.5)
plot_funct(2,5)
plot_funct(5,5)
