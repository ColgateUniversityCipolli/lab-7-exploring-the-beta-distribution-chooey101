sample_size = sample.size
)
return(results)
}
graph_funct(2,5)
set.seed(7272 + i)
set.seed(7272)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5) #beta distribution for alpha=5 and beta=2
cum_beta <- cumean(beta_values)
set.seed(7272)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5) #beta distribution for alpha=5 and beta=2
cum_beta <- cummean(beta_values)
cum_variance  <- cumvar(beta_values)
cum_skewness  <- cumskewness(beta_values)
set.seed(7272)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5) #beta distribution for alpha=5 and beta=2
cum_beta <- cummean(beta_values)
cum_variance  <- cumvar(beta_values)
cum_skewness  <- cumske(beta_values)
help(cumstats)
set.seed(7272)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5) #beta distribution for alpha=5 and beta=2
cum_beta <- cummean(beta_values)
cum_variance  <- cumvar(beta_values)
cum_skewness  <- cumskew(beta_values)
cum_kurtosis  <- cumkurt(beta_values) - 3
df <- data.frame(
Index = 1:500,
Mean = cum_beta,
Variance = cum_variance,
Skewness = cum_skewness,
Ex_kurt = cum_kurtosis
)
# Initial empty plots
p_mean <- ggplot() + theme_minimal() +
labs(title = "Cumulative Mean", x = "Observation", y = "Mean") +
geom_hline(yintercept = true_stats$mean, color = "red", linetype = "dashed")
true_stats <- stat_funct(2, 5)
set.seed(7272)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5) #beta distribution for alpha=5 and beta=2
cum_beta <- cummean(beta_values)
cum_variance  <- cumvar(beta_values)
cum_skewness  <- cumskew(beta_values)
cum_kurtosis  <- cumkurt(beta_values) - 3
df <- data.frame(
Index = 1:500,
Mean = cum_beta,
Variance = cum_variance,
Skewness = cum_skewness,
Ex_kurt = cum_kurtosis
)
# Initial empty plots
p_mean <- ggplot() + theme_minimal() +
labs(title = "Cumulative Mean", x = "Observation", y = "Mean") +
geom_hline(yintercept = true_stats$mean, color = "red", linetype = "dashed")
p_var <- ggplot() + theme_minimal() +
labs(title = "Cumulative Variance", x = "Observation", y = "Variance") +
geom_hline(yintercept = true_stats$variance, color = "red", linetype = "dashed")
p_skew <- ggplot() + theme_minimal() +
labs(title = "Cumulative Skewness", x = "Observation", y = "Skewness") +
geom_hline(yintercept = true_stats$skewness, color = "red", linetype = "dashed")
p_kurt <- ggplot() + theme_minimal() +
labs(title = "Cumulative Kurtosis (Excess)", x = "Observation", y = "Kurtosis") +
geom_hline(yintercept = true_stats$ex_kurt, color = "red", linetype = "dashed")
for(i in 2:50){
set.seed(7272 + i)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5)
df_iter <- data.frame(
Index = 1:500,
Mean = cumean(beta_values),
Variance = cumvar(beta_values),
Skewness = cumskewness(beta_values),
Kurtosis = cumkurtosis(beta_values) - 3
)
# Add lines for each iteration to plots with varying colors
p_mean <- p_mean +
geom_line(data = df_iter, aes(x = Index, y = Mean), color = i, alpha = 0.6)
p_var <- p_var +
geom_line(data = df_iter, aes(x = Index, y = Variance), color = i, alpha = 0.6)
p_skew <- p_skew +
geom_line(data = df_iter, aes(x = Index, y = Skewness), color = i, alpha = 0.6)
p_kurt <- p_kurt +
geom_line(data = df_iter, aes(x = Index, y = Kurtosis), color = i, alpha = 0.6)
}
(p_mean | p_var) / (p_skew | p_kurt)
for(i in 2:50){
set.seed(7272 + i)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5)
df_iter <- data.frame(
Index = 1:500,
Mean = cummean(beta_values),
Variance = cumvar(beta_values),
Skewness = cumskew(beta_values),
Kurtosis = cumkurt(beta_values) - 3
)
# Add lines for each iteration to plots with varying colors
p_mean <- p_mean +
geom_line(data = df_iter, aes(x = Index, y = Mean), color = i, alpha = 0.6)
p_var <- p_var +
geom_line(data = df_iter, aes(x = Index, y = Variance), color = i, alpha = 0.6)
p_skew <- p_skew +
geom_line(data = df_iter, aes(x = Index, y = Skewness), color = i, alpha = 0.6)
p_kurt <- p_kurt +
geom_line(data = df_iter, aes(x = Index, y = Kurtosis), color = i, alpha = 0.6)
}
(p_mean | p_var) / (p_skew | p_kurt)
for (i in 1:1000) {
set.seed(7272+i)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5)
# Calculate statistics
sim_results <- sim_results |>
add_row(
mean = mean(beta_values),
variance = var(beta_values),
skewness = cumstats::skewness(beta_values),
kurtosis = cumstats::kurtosis(beta_values) - 3) # Excess kurtosis
}
sim_results <- tibble(
mean = numeric(),
variance = numeric(),
skewness = numeric(),
kurtosis = numeric()
)
for (i in 1:1000) {
set.seed(7272+i)
beta_values <- rbeta(500, shape1 = 2, shape2 = 5)
# Calculate statistics
sim_results <- sim_results |>
add_row(
mean = mean(beta_values),
variance = var(beta_values),
skewness = cumstats::skewness(beta_values),
kurtosis = cumstats::kurtosis(beta_values) - 3) # Excess kurtosis
}
p_mean <- ggplot(sim_results, aes(x=mean)) +
geom_histogram(aes(y=..density..), fill="steelblue", alpha=0.5, bins=30) +
geom_density(color="blue") +
geom_vline(xintercept = true_stats$mean, color="red", linetype="dashed") +
theme_minimal() +
labs(title = "Mean", x = "Mean", y = "Density")
# Variance plot
p_variance <- ggplot(sim_results, aes(x=variance)) +
geom_histogram(aes(y=..density..), bins=30, fill="green", alpha=0.5) +
geom_density(color="darkgreen") +
geom_vline(xintercept = true_stats$variance, color="red", linetype="dashed") +
theme_minimal() +
labs(title = "Variance", x = "Variance", y = "Density")
# Skewness
p_skewness <- ggplot(sim_results, aes(x=skewness)) +
geom_histogram(aes(y=..density..), fill="purple", alpha=0.6, bins=30) +
geom_density(color="purple") +
geom_vline(xintercept = true_stats$skewness, color="red", linetype="dashed") +
theme_minimal() +
labs(title = "Skewness", x = "Skewness", y = "Density")
# Kurtosis
p_kurtosis <- ggplot(sim_results, aes(x=kurtosis)) +
geom_histogram(bins=30, aes(y=..density..), fill="orange") +
geom_density(color="brown") +
geom_vline(xintercept = true_stats$ex_kurt, color="red", linetype="dashed") +
theme_minimal() +
labs(title = "Kurtosis (Excess)", x = "Kurtosis", y = "Density")
p_mean
p_variance
p_skewness
p_kurtosis
wb.data <- read_csv("wbdata.csv")
wb.data <- wb.data |>
select(67) |>
rename("2022_data" = "...67")|>
mutate(`2022_data` = if_else(row_number() %in% 2:267, `2022_data` / 1000, `2022_data`))
View(wb.data)
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data)
m2 <- mean((data)^2)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
#Solve for MOM
nleqslv(x=c(1,1),
fn = MOM.beta,
data=wb.data$`2022_data`)
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data)
m2 <- mean((data)^2)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
#Solve for MOM
nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
View(wb.data)
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data)
m2 <- mean((data)^2)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
#Solve for MOM
nleqslv(x=c(-1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(((data)^2), na.rm = T)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
###Solve for MLE
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
###Solve for MLE
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
lower = 0,
upper = 1,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
data <- na.omit(data)
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
neg = T)
optim(par = c(1,1),
fn = llbeta,
data=wb.data$`2022_data`,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
set.seed(7272 + i)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
View(MLE.est)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,2),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta), na.rm=T), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,5),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(.1,.1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(.001,.001),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
llbeta <- function(par, data, neg=FALSE){
alpha <- par[1]
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
optim(par = c(1,1),
fn = llbeta,
data = wb.data$`2022_data`,
neg = F)
nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
alpha_mom <- mom_result$x[1]
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta <- par[2]
EX1 <- (alpha)/(alpha+beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(((data)^2), na.rm = T)
estimates <- c(EX1-m1,EX2-m2)
return (estimates) # Goal: find lambda so this is 0
}
#Solve for MOM
mom_result <- nleqslv(x=c(1,1),
fn = MOM.beta.fn,
data=wb.data$`2022_data`)
alpha_mom <- mom_result$x[1]
beta_mom <- mom_result$x[2]
ggplot(data = wb.data$`2022_data`, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
data_df <- data.frame(x = wb.data$`2022_data`)
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=30, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=1000
, fill = "lightblue", color = "black", alpha = 0.7) +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
ggplot(data = data_df, aes(x = x)) +
# Plot the histogram
geom_histogram(aes(y = ..density..),bins=30
, fill = "lightblue", color = "black") +
# Add the MOM Beta distribution
stat_function(
fun = function(x) dbeta(x, shape1 = alpha_mom, shape2 = beta_mom),
color = "red", size = 1.5
) +
# Customize the plot
labs(
title = "Histogram of Data with MOM Beta Distribution",
x = "Data Values",
y = "Density"
) +
theme_minimal()
pt.est <- tibble(
iteration = numeric(),
MLE.alpha = numeric(),
MLE.beta = numeric(),
MOM.alpha = numeric(),
MOM.beta = numeric()
)
for(i in 1:1000){
set.seed(7272 + i)
beta_estimation_values <- rbeta(266, shape1 = 8, shape2 = 950)
MLE.est = optim(par = c(8,950),
fn = llbeta,
data = beta_estimation_values,
neg = T)
MLE.alpha = MLE.est$par[1]
MLE.beta = MLE.est$par[2]
MOM.est = nleqslv(x=c(8,950),
fn = MOM.beta.fn,
data = beta_estimation_values)
MOM.alpha = MOM.est$x[1]
MOM.beta = MOM.est$x[2]
pt.est <- pt.est |>
add_row(
iteration = i,
MLE.alpha = MLE.alpha,
MLE.beta = MLE.beta,
MOM.alpha = MOM.alpha,
MOM.beta = MOM.beta
)
}
p_mle_alpha <- ggplot(pt.est, aes(x=MLE.alpha))+
geom_histogram(aes(y=after_stat(density)), fill="steelblue", alpha=0.5, bins=30) +
geom_density(color="blue") +
theme_minimal() +
labs(title = "MLE Alpha", x = "MLE Alpha", y = "Density")
p_mle_beta <- ggplot(pt.est, aes(x=MLE.beta))+
geom_histogram(aes(y=after_stat(density)), fill="purple", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_minimal() +
labs(title = "MLE Beta", x = "MLE Beta", y = "Density")
p_mom_alpha <- ggplot(pt.est, aes(x=MOM.alpha))+
geom_histogram(aes(y=after_stat(density)), fill="orange", alpha=0.5, bins=30) +
geom_density(color="brown") +
theme_minimal() +
labs(title = "MOM Alpha", x = "MLE Alpha", y = "Density")
p_mom_beta <- ggplot(pt.est, aes(x=MOM.beta))+
geom_histogram(aes(y=after_stat(density)), fill="green", alpha=0.5, bins=30) +
geom_density(color="darkgreen") +
theme_minimal() +
labs(title = "MOM Beta", x = "MLE Beta", y = "Density")
(p_mle_alpha | p_mle_beta) / (p_mom_alpha | p_mom_beta)
